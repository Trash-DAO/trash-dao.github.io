import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { listenForTransfers, safeTransferFrom } from './trashCanAPI';

export interface TrashCanState {
  pendingTx: boolean;
}

const initialState: TrashCanState = {
  pendingTx: false,
};

let alreadyListening = false;

export const safeTransferFromAsync = createAsyncThunk(
  'trashCan/safeTransferFrom',
  async (arg: {contractAddress: string, tokenId: string}, thunkAPI) => {
    if (!alreadyListening) {
      listenForTransfers(arg.contractAddress, () => {
        thunkAPI.dispatch(transferSuccess());
      });
      alreadyListening = true;
    }
    const tx = await safeTransferFrom(arg.contractAddress, +arg.tokenId);
    // const receipt = await tx.wait();
    // return receipt.transactionHash;
  }
);

export const trashCanSlice = createSlice({
  name: 'trashCan',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    transferSuccess: (state, action: PayloadAction<void>) => {
      state.pendingTx = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(safeTransferFromAsync.pending, (state) => {
        state.pendingTx = true;
      })
      .addCase(safeTransferFromAsync.fulfilled, (state, action) => {
        state.pendingTx = false;
      })
  },
});

export const { transferSuccess } = trashCanSlice.actions;

export const selectPendingTx = (state: RootState) => state.trashCan?.pendingTx;

export default trashCanSlice.reducer;
