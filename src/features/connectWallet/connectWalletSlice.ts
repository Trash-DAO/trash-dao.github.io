import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { isWalletConnected, connectWallet, hasWallet } from './connectWalletAPI';

export interface ConnectWalletState {
  connected: boolean;
  loading: boolean;
  address?: string;
  network?: string;
  hasWallet: boolean;
  error?: string;
}

const initialState: ConnectWalletState = {
  connected: false,
  loading: false,
  hasWallet: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const isWalletConnectedAsync = createAsyncThunk(
  'connectWallet/isWalletConnected',
  async () => {
    const response = await isWalletConnected();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const connectWalletAsync = createAsyncThunk(
  'connectWallet/connectWallet',
  async () => {
    const response = await connectWallet();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const hasWalletAsync = createAsyncThunk(
  'connectWallet/hasWallet',
  () => {
    const response = hasWallet();
    return response;
  }
);


export const connectWalletSlice = createSlice({
  name: 'connectWallet',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setHasWallet: (state, action) => {
      state.hasWallet = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(hasWalletAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(hasWalletAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.hasWallet = action.payload;
      })
      .addCase(hasWalletAsync.rejected, (state) => {
        state.loading = false;
        state.hasWallet = false;
      })
      .addCase(isWalletConnectedAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(isWalletConnectedAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.connected = action.payload;
      })
      .addCase(isWalletConnectedAsync.rejected, (state) => {
        state.loading = false;
        state.connected = false;
        state.error = "There was an error";
      })
      .addCase(connectWalletAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(connectWalletAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.connected = true;
        state.address = action.payload.address;
        state.network = action.payload.network;
      });
  },
});

export const { setHasWallet } = connectWalletSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectConnected = (state: RootState) => state.connectWallet.connected;

export const selectLoading = (state: RootState) => state.connectWallet.loading;

export const selectAddress = (state: RootState) => state.connectWallet.address;

export const selectNetwork = (state: RootState) => state.connectWallet.network;

export const selectHasWallet = (state: RootState) => state.connectWallet.hasWallet;


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default connectWalletSlice.reducer;
